import chess
import chess.pgn
import re
import os
from langchain_core.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain_groq import ChatGroq

from dotenv import load_dotenv, find_dotenv
load_dotenv(find_dotenv())

# Nome dos jogadores
human_player = "Humano"
groq_player = "Groq"
llm_groq = ChatGroq(temperature=0.1, model_name="llama3-70b-8192")

memory_groq = ConversationBufferMemory(memory_key="chat_history", input_key="input")

# Template para o Groq escolher a melhor jogada
groq_template = """
    You are a Chess Grandmaster.
    We are currently playing chess. 
    You are playing with the black pieces.

    I will give you the last move, the history of the game so far, the
    actual board position, and you must analyze the position and find the best move.

    # OUTPUT
    Do not use any special characters. 
    Give your response in the following order:

    1. Your move, using the following format: My move: "Move" (in the SAN notation, in English).
    2. The explanation, in Portuguese, of why you chose the move, in no more than 3 sentences.
    """

groq_prompt = PromptTemplate.from_messages([
    ("system", groq_template), 
    ("human", "{input}")])

# Criação da cadeia de prompts para o Groq
groq_chain = groq_prompt | llm_groq

# Função para obter a jogada do Groq
def get_move_from_groq(last_move, board, node):
    game_temp = chess.pgn.Game.from_board(board)
    history = str(game_temp)
    pattern = r".*?(?=1\. e4)"
    history = re.sub(pattern, "", history, flags=re.DOTALL)

    # Formatando a entrada para o Groq
    template_input = """ 
        Here's the history of the game:
        {history}

        The last move played was: 
        {last_move}   

        Find the best move.
    """
    user_input = template_input.format(
                                last_move=last_move,
                                history=history)

    # Obtendo resposta do Groq
    response = groq_chain.invoke({"input": user_input})
    move_raw = response.content.strip()

    # Validando e processando o movimento
    legal_moves = list(board.legal_moves)
    san_moves = [board.san(move) for move in legal_moves]

    if move_raw in san_moves:
        move_board = board.push_san(move_raw)
        next_node = node.add_variation(move_board)
        next_node.comment = move_raw
        return move_raw, next_node
    else:
        print(f"Invalid move generated by Groq: {move_raw}")
        return None, node

# Inicializando o tabuleiro de xadrez
print("============")
print("Novo jogo entre Humano e Groq")
board = chess.Board()

# Definir o nó atual como o nó raiz do jogo
game = chess.pgn.Game()
node = game

# Jogo começa com o humano (brancas)
while not board.is_game_over():
    # Movimento do humano
    print("\nPosição atual:")
    print(board)
    move1 = input(f"{human_player}, faça seu movimento (ex: e4, Nf3): ").strip()

    try:
        move_board = board.push_san(move1)
        node = node.add_variation(move_board)
    except ValueError:
        print(f"Movimento inválido! {move1} não é permitido.")
        continue

    if board.is_game_over():
        break

    # Movimento do Groq (pretas)
    move2, node = None, node
    while move2 is None:
        move2, node = get_move_from_groq(move1, board, node)

    print(f"\n{groq_player} jogou: {move2}")
    print("========================")

    if board.is_game_over():
        break

# Definindo o resultado do jogo
if board.is_stalemate() or board.is_insufficient_material() or board.is_seventyfive_moves() or board.is_fivefold_repetition():
    result = "1/2-1/2"
elif board.result() == "1-0":
    result = "1-0"
else:
    result = "0-1"
game.headers["White"] = human_player
game.headers["Black"] = groq_player
game.headers["Result"] = result

# Salvando o jogo em PGN
folder_name = f"{human_player} vs {groq_player}"
if not os.path.exists(folder_name):
    os.makedirs(folder_name)
game_num = max([int(i.split("_")[0]) for i in ["0_0"] + os.listdir(folder_name)]) + 1
with open(f"{folder_name}/{game_num}_game.pgn", "w") as f:
    f.write(str(game))

print("Game Over")
print(f"Resultado: {board.result()}")